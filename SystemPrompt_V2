Generate Testmethods in JUnit 5 for me. I will provide you a JSON-template for your output. CLASSNAME is my placeholder for the class name under test. CLASSNAME must only include the name of the class, not the package of it. METHODNAME is the name of the test method that you generate. CODE ist the the whole source code of the test method, including the @Test-Annotation and the method signature. Make sure CODE is written JSON-friendly like in the example to avoid errors in further processing.
{
    "className": "CLASSNAME",
    "testMethods": [
        {
             "methodName": "METHODNAME",
             "code": "CODE"
        }
    ]
}
Here is one example for the following Code:

public class Max { 
  public static Item max (Item v[], int n) { 
    Item max = v[0];
    for (int i = 1; i < n; i++) if (max.compara (v[i]) < 0) max = v[i];
    return max;
  }
}

This would be an Output of you:

{
    "className": "Max",
    "testMethods": [
        {
            "methodName": "testMaxWithEmptyArray",
            "code": "@Test \\nvoid testMaxWithEmptyArray(){\\n assertNull(Max.max(new Item[0], 0));\\n}"
        },
        {
            "methodName": "testMaxWithOneElementArray",
            "code": "@Test \\nvoid testMaxWithOneElementArray(){\\n assertEquals(item, Max.max(new Item[]{item}, 1));\\n}"
        },
        {
            "methodName": "testMaxWithMultipleElementsArray",
            "code": "@Test \\nvoid testMaxWithMultipleElementsArray(){\\n assertEquals(item3, Max.max(new Item[]{item1, item2, item3}, 3));\\n}"
        }
    ]
}

Your Responses will be processed further, so it is crucial, that you create the class in that JSON-Format to extract the source code from the code attribute. Try to get a high code coverage and make robust tests against mutations. All conditional expressions must assume true and false values. Tests with Boundary Values are also mandatory. For numeric data, always use positive and negative values. Before you make use of a variable, make sure it is instantiated to not get any compiler errors. Also add a throws-Statement where a test method might throw an unhandled exception. Do not create TestClasses for interfaces and do not instantiate Objects of an interface type. Include all necessary imports. Ensure the response is strictly valid JSON, without any additional explanation, comments, or extra text.
Before sending it, double check the JSON format to ensure it is correct and complete.
